{"version":3,"file":"index.js","sources":["../../src/utils.ts","../../vite/modulepreload-polyfill","../../src/Emoji.tsx","../../src/EmojiPicker/Navbar.tsx","../../src/EmojiPicker/Footer.tsx","../../src/EmojiPicker/Scroll.tsx","../../src/EmojiPicker.tsx","../../website/index.tsx"],"sourcesContent":["export interface EmojiObject {\n  unicode: string;\n  name: string;\n  keywords?: string[];\n}\n\n/**\n * Converts from unified to native representation of an emoji.\n * @param unified unified representation\n */\nexport function unifiedToNative(unified: string) {\n  const codePoints = unified.split('-').map(u => parseInt(u, 16));\n  return String.fromCodePoint.apply(String, codePoints);\n}\n\n/**\n * Measures the pixel width of a scrollbar.\n * source: https://github.com/sonicdoe/measure-scrollbar.\n */\nexport function measureScrollbar(): number {\n  if (typeof document == 'undefined') return 0;\n  const div = document.createElement('div');\n  div.style.cssText = \"width:100px; height:100px; overflow:scroll; position:absolute; top:-9999px\";\n  document.body.appendChild(div);\n  const scrollbarWidth = div.offsetWidth - div.clientWidth;\n  document.body.removeChild(div);\n  return scrollbarWidth;\n}\n\n/**\n * Calculates the number of rows when key and array are flattened, along\n * with an array of ranges to map an index back to key.\n * @param data key array mapping\n * @param perRow number of elements to chunk array into\n */\nexport type itemRange = { key: string; from: number; to: number; length: number }\nexport function calcCountAndRange(data: Record<string, any[]>, perRow: number) {\n  let itemCount = 0, itemRanges: itemRange[] = [];\n  Object.entries(data).forEach(([key, array]) => {\n    if (array.length === 0) return;\n    let from = itemCount, to = itemCount + 1 + Math.ceil(array.length / perRow);\n    itemRanges.push({key, from, to, length: array.length});\n    itemCount = to;\n  })\n  return {itemCount, itemRanges};\n}\n\n// Returns true if objects shallowly differ.\nexport function shallowDiffer(prev: Object, next: Object): boolean {\n  for (let attribute in prev) { if (!(attribute in next)) { return true; }}\n  for (let attribute in next) { if (prev[attribute] !== next[attribute]) { return true; }}\n  return false;\n}\n\n// Trailing throttle function.\nexport function throttleIdleTask(callback: Function) {\n  // @ts-ignore\n  const idleHandler = typeof requestIdleCallback === 'function' ? requestIdleCallback : setTimeout;\n  let running = false, argsFunc: any;\n  return function throttled(...args: any[]) {\n    argsFunc = args;\n    if (running) { return; }\n    running = true;\n    idleHandler(() => {\n      running = false; \n      callback.apply(null, argsFunc);\n    })\n  }\n}","const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import React, { FC } from 'react';\nimport { EmojiObject, unifiedToNative } from './utils'\nimport twemoji from \"./twemoji.svg\"\n\ntype EmojiProps = { \n  emoji: EmojiObject; \n  className?: string;\n  [key: string]: any; \n}\n\nconst Emoji: FC<EmojiProps> = ({emoji, className, ...props}) => {\n  className = className ? `emoji-picker-emoji ${className}` : `emoji-picker-emoji`\n  return (\n    <img \n      className={className} \n      data-unicode={emoji.unicode}\n      alt={unifiedToNative(emoji.unicode)} \n      src={`${twemoji}#${emoji.unicode}`} \n      draggable=\"false\"\n      aria-label={emoji.name} \n      {...props}\n    />\n  )\n}\n\nexport { EmojiProps, Emoji };\nexport default Emoji;\n","import React, { FunctionComponent, useState, KeyboardEvent, MouseEvent, memo } from \"react\";\nimport Emoji from \"../Emoji\"\nimport { EmojiObject } from \"../utils\"\n\nconst Navbar: FunctionComponent<{data: Record<string, EmojiObject[]>, handleSelectInNavbar: Function, [key: string]: any}> = ({data, handleSelectInNavbar, ...props}) => {\n  \n  // roving tabindex\n  const [index, setIndex] = useState(0);\n  \n  const onNavbarKeyDown = (event: KeyboardEvent) => {\n    switch (event.key) {\n      case 'Enter': \n        return handleSelectInNavbar(Object.keys(data)[index]);\n      case 'ArrowLeft':\n        return index > 0 && setIndex(index => index - 1);\n      case 'ArrowRight':\n        return index < Object.keys(data).length - 1 && setIndex(index => index + 1)\n      case 'Home':\n        return index > 0 && setIndex(0);\n      case 'End':\n        return index < Object.keys(data).length - 1 && setIndex(Object.keys(data).length - 1)\n    }\n  }\n\n  const onNavbarClick = (index: number, category: string) => (event: MouseEvent) => {\n    setIndex(index);\n    handleSelectInNavbar(category);\n  }\n\n  return (\n    <div className=\"emoji-picker-navbar\" {...props} role=\"tablist\" aria-label=\"emoji categories\">\n      { Object.entries(data).map(([category, list], i) => {\n          const props = {\n            className: \"emoji-picker-navbar-category\",\n            key: `navbar-${category}`,\n            onClick: onNavbarClick(i, category),\n            onKeyDown: onNavbarKeyDown,\n            role: \"tab\",\n            \"aria-label\": category,\n            \"aria-selected\": false,\n            tabIndex: -1,\n            ...i == index && {\n              \"aria-selected\": true,\n              tabIndex: 0,\n              ref: (button: HTMLButtonElement) => Boolean(document.activeElement?.closest(\".emoji-picker-navbar\")) && button?.focus(),\n            }\n          }\n          return (\n            <button {...props}>\n              { <Emoji emoji={list[0]}/> }\n            </button>\n          )\n        }\n      )}\n    </div>  \n  )\n}\n\nconst MemoizedNavbar = memo(Navbar)\nexport default MemoizedNavbar;","import React, { FunctionComponent, memo } from \"react\";\nimport Emoji from \"../Emoji\"\nimport { EmojiObject } from \"../utils\"\n\nconst Footer: FunctionComponent<{emoji: EmojiObject | undefined, emojiPreviewName, [key: string]: any}> = ({emoji, emojiPreviewName, ...props}) => {\n  return (\n    <div className=\"emoji-picker-footer\" {...props}>\n      { <Emoji emoji={emoji || {name: \"wave\", unicode: \"1f44b\"}}/> }\n      <div className=\"emoji-picker-name\">\n        { emoji ? emojiPreviewName(emoji) : <span style={{'fontSize': '1.25em'}}>Emoji Picker</span> }\n      </div>\n    </div>     \n  )\n}\n\nconst MemoizedFooter = memo(Footer)\nexport default MemoizedFooter;","import React, { FunctionComponent, useEffect, useRef, Ref, useState, memo, forwardRef, MutableRefObject, CSSProperties, MouseEvent } from \"react\";\nimport { FixedSizeList as VirtualList } from 'react-window';\nimport InfiniteLoader from \"react-window-infinite-loader\";\nimport { EmojiObject, shallowDiffer, itemRange } from '../utils'\nimport Emoji from \"../Emoji\";\n\ntype ScrollProps = {\n  emojisPerRow: number, \n  emojiSize: number,\n  numberScrollRows: number,\n  focusedEmoji: {emoji: EmojiObject, row: number, focusOnRender: boolean, preventScroll: boolean} | null,\n  emojiData: Record<string, EmojiObject[]>;\n  refVirtualList: MutableRefObject<VirtualList>,\n  handleClickInScroll: (emoji: EmojiObject, row: number) => ((event: MouseEvent<HTMLLIElement>) => void) | undefined,\n  handleMouseInScroll: (emoji: EmojiObject, row: number) => ((event: MouseEvent<HTMLLIElement>) => void) | undefined,\n  itemCount: number,\n  itemRanges: itemRange[],\n  collapseHeightOnSearch: boolean,\n}\n\nconst Scroll: FunctionComponent<ScrollProps> = ({emojisPerRow, emojiSize, numberScrollRows, focusedEmoji, emojiData, refVirtualList, handleClickInScroll, handleMouseInScroll, itemCount, itemRanges, collapseHeightOnSearch}) => {\n  \n  const [arrayOfRows, setArrayOfRows] = useState<Record<number, JSX.Element>>({});\n  const infiniteLoaderRef = useRef<InfiniteLoader>(null);\n\n  // Keep track of previously focused emoji to avoid re-rendering all rows.\n  const prevFocusedEmoji = useRef<{emoji: EmojiObject, row: number} | null>(null);\n\n  // Reset arrayOfRows upon change in data or emojisPerRow.\n  useEffect(function resetScrollState() { \n    setArrayOfRows({}); \n    infiniteLoaderRef?.current.resetloadMoreItemsCache();\n    prevFocusedEmoji.current = focusedEmoji; // focusedEmoji included in emojiData change render\n    refVirtualList?.current.scrollToItem(0);\n    loadMoreItems(0, Math.min(numberScrollRows + 10 - 1, itemRanges[itemRanges.length - 1].to));  // minimumBatchSize + threshold - 1\n  }, [emojiData, emojisPerRow]);\n\n  // Recompute the rows of the next and previous focusedEmoji upon change in focusedEmoji.\n  useEffect(function resetRowsWithFocusedEmoji() {\n    let prevEmoji = prevFocusedEmoji.current, nextEmoji = focusedEmoji;\n    if (prevEmoji == nextEmoji) { return; }\n    let rowsToUpdate = prevEmoji?.row == nextEmoji?.row ? [prevEmoji?.row] : [prevEmoji?.row, nextEmoji?.row]\n    rowsToUpdate.forEach(row => row && loadMoreItems(row, row));\n    prevFocusedEmoji.current = nextEmoji;\n    nextEmoji?.row && refVirtualList.current?.scrollToItem(nextEmoji.row);\n  }, [focusedEmoji]);\n\n  const loadMoreItems = (startIndex: number, endIndex: number) => {\n    const nextArrayOfRows = {}\n    let i = startIndex, range: itemRange | undefined;\n    while (i <= endIndex) {\n\n      range = itemRanges.find(range => range.from <= i && i < range.to);\n      if (range === undefined) break;\n\n      for (let rowIndex = i; rowIndex < Math.min(range.to, endIndex + 1); rowIndex++) {\n        if (rowIndex == range.from) {\n          nextArrayOfRows[rowIndex] = <div className=\"emoji-picker-category-title\" aria-rowindex={rowIndex + 1} aria-colindex={1}>{range.key}</div>\n        } else {\n\n          const offset = rowIndex - range.from;\n          const row = emojiData[range.key].slice((offset - 1) * emojisPerRow, offset * emojisPerRow)\n\n          nextArrayOfRows[rowIndex] = (\n            <ul className=\"emoji-picker-category-emoji\" role=\"row\" aria-rowindex={rowIndex + 1}>\n              { row.map((emoji: EmojiObject, colIndex: number) => {\n                  const liProps = {\n                    key: emoji.unicode, \n                    onClick: handleClickInScroll(emoji, rowIndex), \n                    onMouseMove: handleMouseInScroll(emoji, rowIndex), \n                    role: \"gridcell\", \n                    \"aria-rowindex\": rowIndex + 1,\n                    \"aria-colindex\": colIndex + 1,\n                    tabIndex: -1,\n                    ...emoji === focusedEmoji?.emoji && {\n                      tabIndex: 0,\n                      ref: (li: HTMLLIElement) => focusedEmoji.focusOnRender && li?.focus({preventScroll: focusedEmoji.preventScroll}),\n                    }\n                  }\n                  const emojiProps = {\n                    emoji,\n                    ...emoji === focusedEmoji?.emoji && {\n                      className: \"emoji-picker-emoji-focused\",\n                    }\n                  }\n                  return (\n                    <li {...liProps}>\n                      <Emoji {...emojiProps}/>\n                    </li>\n                  )\n                }) \n              }\n            </ul>\n          )\n        }\n      }\n      i = range.to;\n    }\n    setArrayOfRows(prev => Object.assign({}, prev, nextArrayOfRows));\n  }\n\n  return (\n    <InfiniteLoader \n      ref={infiniteLoaderRef}\n      itemCount={itemCount}\n      loadMoreItems={loadMoreItems}\n      isItemLoaded={index => !!arrayOfRows[index]}\n      minimumBatchSize={numberScrollRows}\n      threshold={10}\n    >\n      {({onItemsRendered, ref}) => (\n        <VirtualList \n          onItemsRendered={onItemsRendered} \n          ref={list => {ref(list); refVirtualList && (refVirtualList.current = list);}}\n          itemCount={itemCount} \n          itemData={arrayOfRows}\n          itemSize={emojiSize} \n          height={collapseHeightOnSearch ? Math.min(itemCount * emojiSize + 9, numberScrollRows * emojiSize) : numberScrollRows * emojiSize}\n          innerElementType={innerElementType}\n        >\n          {MemoizedRow}\n        </VirtualList>\n      )}\n    </InfiniteLoader>\n  )\n}\n\nconst MemoizedScroll = memo(Scroll, function ScrollPropsAreEqual(prevProps, nextProps) {\n  return prevProps.focusedEmoji?.emoji == nextProps.focusedEmoji?.emoji\n      && prevProps.emojiData == nextProps.emojiData\n      && prevProps.collapseHeightOnSearch == nextProps.collapseHeightOnSearch\n      && prevProps.emojiSize == nextProps.emojiSize\n      && prevProps.emojisPerRow == nextProps.emojisPerRow;\n});\n\nexport default MemoizedScroll;\n\nconst VirtualRow: FunctionComponent<{index: number, style: CSSProperties, data}> = ({index, style, data}) => {\n  return (\n    <div className=\"emoji-picker-virtual-row\" style={style}>\n      {data[index]}\n    </div>\n  )\n}\n\n/**\n * memoize rows of the virtualList, only re-rendering when changing in data[index]\n */\nconst MemoizedRow = memo(VirtualRow, function compareRowProps(prevProps, nextProps) {\n  const { style: prevStyle, data: prevData, index: prevIndex, ...prevRest } = prevProps;\n  const { style: nextStyle, data: nextData, index: nextIndex, ...nextRest } = nextProps;\n  return prevData[prevIndex] === nextData[nextIndex] && !shallowDiffer(prevStyle, nextStyle) && !shallowDiffer(prevRest, nextRest)\n});\n\n\n/**\n * adds padding to the bottom of virtual list\n * See: https://github.com/bvaughn/react-window#can-i-add-padding-to-the-top-and-bottom-of-a-list\n */\nconst LIST_PADDING_SIZE = 9;\nconst innerElementType = forwardRef(({style, ...props }: {style: CSSProperties}, ref: Ref<VirtualList>) => (\n  // @ts-ignore\n  <div ref={ref} style={{...style, height: `${parseFloat(style.height) + LIST_PADDING_SIZE}px`}} \n    {...props}\n  />\n));","import React, { forwardRef, useCallback, useState, useImperativeHandle, useMemo, useLayoutEffect, useRef, Ref, useReducer, KeyboardEvent, MouseEvent, useEffect } from \"react\"\nimport { FixedSizeList as VirtualList } from 'react-window';\nimport { EmojiObject, measureScrollbar, calcCountAndRange, itemRange } from './utils'\n\nimport Navbar from \"./EmojiPicker/Navbar\";\nimport Footer from \"./EmojiPicker/Footer\";\nimport Scroll from \"./EmojiPicker/Scroll\";\n\ntype EmojiPickerProps = {\n  emojiData: Record<string, EmojiObject[]>;\n  emojiSize?: number;\n  onEmojiSelect?: (emoji: EmojiObject, event: KeyboardEvent | MouseEvent) => void;\n  showNavbar?: boolean;\n  showFooter?: boolean;\n  showScroll?: boolean;\n  emojisPerRow?: number;\n  numberScrollRows?: number;\n  onKeyDownScroll?: Function;\n  collapseCategoriesOnSearch?: boolean;\n  collapseHeightOnSearch?: boolean;\n  theme?: \"system\" | \"light\" | \"dark\";\n  emojiPreviewName?: (emoji: EmojiObject) => string;\n}\n\n// Define public methods accessible via ref.\n\nexport interface EmojiPickerRef {\n  search: (query: string) => void;\n  emojis: Record<string, EmojiObject[]>;\n  focusedEmoji: EmojiObject | null;\n  handleKeyDownScroll: (event: KeyboardEvent<HTMLElement>) => void;\n}\n\ntype PickerState = {\n  searchEmojis: {emojis: Record<string, EmojiObject[]> | null, query: string},\n  focusedEmoji: {emoji: EmojiObject, row: number, focusOnRender: boolean, preventScroll: boolean} | null\n}\n\n\n// Use state reducer to avoid separate re-renders to changes to searchEmojis and focusedEmoji.\nfunction EmojiPickerReducer({emojiData}) {\n  return (prevState: PickerState, nextState: any): PickerState => {\n    // reset focusedEmoji to first emoji on searchEmojis change\n    if (nextState.searchEmojis && prevState.searchEmojis != nextState.searchEmojis) {\n      let emojis = (nextState.searchEmojis?.query && nextState.searchEmojis?.emojis) || emojiData, \n        category = emojis[Object.keys(emojis)[0]];\n      let emoji = category[0];\n      nextState.focusedEmoji = {row: 1, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}\n    }\n    return {...prevState, ...nextState};\n  }\n}\n\nfunction EmojiPickerRefComponent({emojiData = {}, emojiSize = 36, numberScrollRows = 12, onEmojiSelect = (emoji: EmojiObject) => console.log(emoji), showNavbar = false, showFooter = false, showScroll = true, emojisPerRow = 9, onKeyDownScroll = (event) => null, collapseCategoriesOnSearch = true, collapseHeightOnSearch = true, theme = \"system\", emojiPreviewName = (emoji: EmojiObject) => emoji.name}: EmojiPickerProps, ref: Ref<EmojiPickerRef>) {\n\n  const pickerStateReducer = useCallback(EmojiPickerReducer({emojiData}), [emojiData])\n  const [ pickerState, setPickerState ] = useReducer(pickerStateReducer, {\n    searchEmojis: {emojis: null, query: \"\"},\n    focusedEmoji: {row: 1, emoji: Object.values(emojiData).flat()[0], focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}\n  })\n\n  const { itemCount, itemRanges } = useMemo(() => calcCountAndRange(pickerState.searchEmojis.emojis || emojiData, emojisPerRow), [pickerState.searchEmojis, emojisPerRow]);\n\n  /**\n   * TODO: Replace in-memory search with indexeddb index.\n   * See as an example: https://github.com/nolanlawson/emoji-picker-element\n   */\n  const search = (query: string): void => {\n    const {searchEmojis} = pickerState;\n\n    // reset pickerState when query is empty string\n    if (!query)\n      return setPickerState({\n        searchEmojis: {emojis: null, query: \"\"},\n        focusedEmoji: {row: 1, emoji: Object.values(emojiData).flat()[0], focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}\n      });\n\n    // assumption: increasing query length if prevSearchEmojis is empty will not change searchEmojis\n    if (searchEmojis?.emojis && !Object.values(searchEmojis.emojis).flat().length && searchEmojis.query.length < query.length)\n      return setPickerState({searchEmojis: {emojis: searchEmojis.emojis, query}});\n\n    // use prevSearchEmojis if query length has increased, else use full set\n    const index = query.length > searchEmojis.query.length && searchEmojis.emojis != null\n      ? Object.values(searchEmojis.emojis).flat()\n      : Object.values(emojiData).flat();\n\n    // simple weighted search to filter emojiObjects\n    let results = index\n      .map(emoji => ({emoji, score: (emoji.keywords || []).map(word => word.indexOf(query) != -1).reduce((a, b) => a + Number(b), Number(emoji.name.indexOf(query) != -1) * 3)}))\n      .filter(a => a.score)\n      .sort((a, b) => b.score - a.score)\n      .map(({emoji}) => emoji);\n\n    if (collapseCategoriesOnSearch) {\n      return setPickerState({searchEmojis: {emojis: {\"Search Results\": results}, query}});\n    } else {\n      let grouped = Object.entries(emojiData).map(([category, list]) => ([category, list.filter(emoji => results.includes(emoji))])).reduce((sum, [category, list]) => Object.assign(sum, {[category as string]: list}), {});\n      return setPickerState({searchEmojis: {emojis: grouped, query}});\n    }\n  }\n\n  const refVirtualList = useRef<VirtualList>(null);\n  const refScroll = useRef<HTMLDivElement>(null);\n\n  // Define event handlers in scroll element.\n\n  const handleClickInScroll = (emoji: EmojiObject, row: number) => (event: MouseEvent<HTMLElement>) => {\n    event.preventDefault(); // MDN docs: keep the focus from leaving the HTMLElement\n    onEmojiSelect(emoji, event);\n    setPickerState({focusedEmoji: {row, emoji, focusOnRender: true, preventScroll: true}})\n  }\n  \n  const handleMouseInScroll = (emoji: EmojiObject, row: number) => (event: MouseEvent<HTMLElement>) => {\n    if (emoji == pickerState.focusedEmoji?.emoji || event.movementX == 0 && event.movementY == 0) return;\n    event.preventDefault(); // MDN docs: keep the focus from leaving the HTMLElement\n    // @ts-ignore\n    const isSafari = window.safari !== undefined; // safari does not support preventScroll focus\n    setPickerState({focusedEmoji: {row, emoji, focusOnRender: true, preventScroll: true}})\n    isSafari && refScroll.current && refScroll.current.focus();\n  }\n\n  const handleKeyDownScroll = (event: KeyboardEvent<HTMLElement>) => {\n    const {searchEmojis, focusedEmoji} = pickerState;\n    const emojis = Object.values(searchEmojis.emojis || emojiData).filter(array => array.length !== 0);\n    switch (event.key) {\n      case \"Enter\": {\n        event.preventDefault();\n        if (!focusedEmoji) {\n          let emoji = Object.values(searchEmojis.emojis || emojiData).flat()[0]\n          emoji && setPickerState({focusedEmoji: {row: 1, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n        } else {\n          focusedEmoji.emoji && onEmojiSelect(focusedEmoji.emoji, event);\n        }\n        return;\n      }\n      case 'Home': {\n        event.preventDefault();\n        let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n        let emojis = searchEmojis.emojis || emojiData, \n          category = emojis[Object.keys(emojis)[0]];\n        emoji = category[0]\n        row = 1;\n        return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n      }\n      case 'End': {\n        event.preventDefault();\n        let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n        let emojis = searchEmojis.emojis || emojiData, \n          category = emojis[Object.keys(emojis).pop() as string];\n        emoji = category[category.length - 1]\n        row = itemRanges[itemRanges.length - 1]?.to - 1;\n        return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}});\n      }\n      case \"ArrowUp\": {\n        event.preventDefault();\n        let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n        if (!focusedEmoji) {\n          emoji = Object.values(searchEmojis.emojis || emojiData).flat()[0];\n          row = 1;\n        } else {\n          let arrayIndex, arrayEmoji, emojiIndex;\n          emojis.find((array, index) => { \n            emojiIndex = array.findIndex(emoji => emoji === focusedEmoji.emoji), arrayIndex = index, arrayEmoji = array; \n            return emojiIndex !== -1;\n          })\n          if (emojiIndex != undefined) {\n            if (emojiIndex - emojisPerRow >= 0) { // not first row\n              emoji = arrayEmoji[emojiIndex - emojisPerRow]; \n              row = focusedEmoji.row - 1;\n            } else if (arrayIndex !== 0) {\n              const arrayAbove = emojis[arrayIndex - 1];\n              const index = (emojiIndex > (arrayAbove.length - 1) % emojisPerRow) ? arrayAbove.length - 1 : Math.floor((arrayAbove.length - 1 - emojiIndex) / emojisPerRow) * emojisPerRow + emojiIndex;\n              emoji = arrayAbove[index]; // go directly up if possible; else last element\n              row = focusedEmoji.row - 2; // skip category title row\n            }\n          }\n        }\n        return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n      }\n      case \"ArrowDown\": {\n        event.preventDefault();\n        let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n        if (!focusedEmoji) {\n          emoji = Object.values(searchEmojis.emojis || emojiData).flat()[0]\n          row = 1;\n        } else {\n          let arrayIndex, arrayEmoji, emojiIndex;\n          emojis.find((array, index) => { \n            emojiIndex = array.findIndex(emoji => emoji === focusedEmoji.emoji), arrayIndex = index, arrayEmoji = array; \n            return emojiIndex !== -1;\n          })\n          if (emojiIndex != undefined) {\n            if (emojiIndex + emojisPerRow < arrayEmoji.length) { // not last row\n              emoji = arrayEmoji[emojiIndex + emojisPerRow]; \n              row = focusedEmoji.row + 1;            \n            } else if (emojiIndex + emojisPerRow < Math.ceil(arrayEmoji.length / emojisPerRow) * emojisPerRow) {\n              emoji = arrayEmoji[arrayEmoji.length - 1];\n              row = focusedEmoji.row + 1;\n            } else if (arrayIndex !== emojis.length - 1) {\n              const arrayBelow = emojis[arrayIndex + 1], modIndex = emojiIndex % emojisPerRow;\n              emoji = arrayBelow[modIndex] || arrayBelow[arrayBelow.length - 1] // go directly down if possible\n              row = focusedEmoji.row + 2; // skip category title row\n            }\n          }\n        }\n        return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n      }\n      case \"ArrowLeft\": {\n        event.preventDefault();\n        let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n        if (!focusedEmoji) {\n          emoji = Object.values(searchEmojis.emojis || emojiData).flat()[0]\n          row = 1;\n        } else {\n          let arrayIndex, arrayEmoji, emojiIndex;\n          emojis.find((array, index) => { \n            emojiIndex = array.findIndex(emoji => emoji === focusedEmoji.emoji), arrayIndex = index, arrayEmoji = array; \n            return emojiIndex !== -1;\n          })\n          if (emojiIndex != undefined) {\n            if (emojiIndex - 1 >= 0) { \n              emoji = arrayEmoji[emojiIndex - 1];\n              row = Math.floor(emojiIndex/emojisPerRow) == Math.floor((emojiIndex - 1)/emojisPerRow) ? focusedEmoji.row : focusedEmoji.row - 1;\n            } else if (arrayIndex !== 0) { // category above this one if it exists\n              const arrayAbove = emojis[arrayIndex - 1];\n              emoji = arrayAbove[arrayAbove.length - 1];\n              row = focusedEmoji.row - 2; // skip category title row\n            }\n          }\n        }\n        return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n      }\n      case \"ArrowRight\": {\n        event.preventDefault();\n        let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n        if (!focusedEmoji) {\n          emoji = Object.values(searchEmojis.emojis || emojiData).flat()[0]\n          row = 1;\n        } else {\n          let arrayIndex, arrayEmoji, emojiIndex;\n          emojis.find((array, index) => { \n            emojiIndex = array.findIndex(emoji => emoji === focusedEmoji.emoji), arrayIndex = index, arrayEmoji = array; \n            return emojiIndex !== -1;\n          })\n          if (emojiIndex != undefined) {\n            let newIndex = emojiIndex + 1;\n            if (newIndex < arrayEmoji.length) { \n              emoji = arrayEmoji[newIndex] \n              row = Math.floor(emojiIndex/emojisPerRow) == Math.floor(newIndex/emojisPerRow) ? focusedEmoji.row : focusedEmoji.row + 1;\n            } else if (arrayIndex !== emojis.length - 1) {\n              let arrayBelow = emojis[arrayIndex + 1];\n              emoji = arrayBelow[0];\n              row = focusedEmoji.row + 2; // skip category title row\n            }\n          }\n        }\n        return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n      }\n      default:\n        return onKeyDownScroll(event);\n    }\n  }\n\n\n  // Make internal state and methods as publicly accessible via ref.\n  useImperativeHandle(ref, () => ({\n    search, \n    handleKeyDownScroll, \n    emojis: pickerState.searchEmojis.emojis || emojiData, \n    focusedEmoji: pickerState.focusedEmoji?.emoji,\n  }) as EmojiPickerRef)\n\n  const ScrollProps = {\n    emojiData: pickerState.searchEmojis.emojis || emojiData,\n    emojisPerRow: emojisPerRow!,\n    emojiSize,\n    numberScrollRows,\n    focusedEmoji: pickerState.focusedEmoji,\n    refVirtualList,\n    handleClickInScroll,\n    handleMouseInScroll,\n    collapseHeightOnSearch,\n    itemCount, \n    itemRanges,\n  }\n\n\n  // Define event handler for select in navbar element.\n  const handleSelectInNavbar = (category: string) => {\n    let virtualList = refVirtualList.current;\n    if (virtualList) {\n      let range: itemRange | undefined = itemRanges.find(range => range.key === category)\n      if (range) {\n        setPickerState({focusedEmoji: {row: range.from + 1, emoji: emojiData[category][0], focusOnRender: false, preventScroll: false}})\n        virtualList.scrollToItem(range.from, \"start\");\n      }\n    }\n  }\n\n  const getWidths = () => {\n    const scrollbarWidth = measureScrollbar()\n    return {\n      scrollbarWidth,\n      width: `calc(${emojiSize}px * ${emojisPerRow} + 1em + ${scrollbarWidth}px)`\n    }\n  }\n\n  // Compute width on window resize.\n  const [width, setWidth] = useState(getWidths);\n  useLayoutEffect(() => {\n    let resizeWidth = () => setWidth(getWidths);\n    window.addEventListener(\"resize\", resizeWidth);\n    return () => window.removeEventListener(\"resize\", resizeWidth);\n  }, [])\n\n  return (\n    <div className={`emoji-picker emoji-picker-${theme}`} style={{width: width.width}}>\n      { showNavbar && \n        <Navbar data={emojiData} handleSelectInNavbar={handleSelectInNavbar} style={{marginRight: width.scrollbarWidth}}/> \n      }\n      <div className=\"emoji-picker-scroll\" role=\"grid\" aria-rowcount={itemCount} aria-colcount={emojisPerRow} onKeyDown={handleKeyDownScroll} ref={refScroll}>\n        { pickerState.searchEmojis.emojis\n          ? Object.values(pickerState.searchEmojis.emojis).flat().length\n            ? <Scroll {...ScrollProps}/>\n            : <div className=\"emoji-picker-category\" style={{height: collapseHeightOnSearch ? 'inherit' : '432px'}}>\n                <div className=\"emoji-picker-category-title\">No results</div>\n              </div>\n          : showScroll && \n              <Scroll {...ScrollProps}/>\n        }\n      </div>\n      { showFooter && \n        <Footer emoji={pickerState.focusedEmoji?.emoji} emojiPreviewName={emojiPreviewName}/> \n      }\n    </div>\n  )\n}\n\nexport const EmojiPicker = forwardRef(EmojiPickerRefComponent);","import React, { useRef, useCallback, useState, ChangeEvent, KeyboardEvent } from 'react';\nimport ReactDOM from 'react-dom';\nimport type { EmojiObject } from '../src/index';\nimport { EmojiPicker, EmojiPickerRef, unifiedToNative, throttleIdleTask } from '../src/index';\nimport EmojiData from \"../data/twemoji.json\"\nimport './index.css';\n\nimport \"../src/EmojiPicker.css\"\nimport \"../src/Emoji.css\"\n\nconst copyToClipboard = async (string: string) => {\n  try {\n    // Try to use the Async Clipboard API with fallback to the legacy approach.\n    // @ts-ignore\n    const {state} = await navigator.permissions.query({name: 'clipboard-write'});\n    if (state !== 'granted') { throw new Error('Clipboard permission not granted'); }\n    await navigator.clipboard.writeText(string);\n  } catch {\n    const textArea = document.createElement('textarea');\n    textArea.value = string;\n    document.body.appendChild(textArea);\n    textArea.select();\n    document.execCommand('copy');\n    document.body.removeChild(textArea);\n  }\n};\n\nfunction ExampleSetup() {\n\n  const picker = useRef<EmojiPickerRef>()\n  const input = useRef<HTMLInputElement>()\n\n  // need reference to same function to throttle\n  const throttledQuery = useCallback(throttleIdleTask((query: string) => picker.current?.search(query)), [picker.current]);\n\n  const inputProps = {\n    ref: input,\n    placeholder: \"search-or-navigate\",\n    onChange: (event: ChangeEvent<HTMLElement>) => throttledQuery((event.target as HTMLInputElement).value.toLowerCase()),\n    onKeyDown: (event: KeyboardEvent<HTMLElement>) => { \n      if (![\"Enter\", \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\", \"Home\", \"End\"].includes(event.key)) return;\n      picker.current.handleKeyDownScroll(event); \n      if (event.key == \"Enter\" && !event.shiftKey) {\n        picker.current.search(\"\");\n        input.current.value = \"\";\n      }\n    },\n  }\n\n  const onEmojiSelect = (emoji: EmojiObject) => {\n    const nativeEmoji = unifiedToNative(emoji.unicode);\n    copyToClipboard(nativeEmoji);\n    notification.show(`Copied ${nativeEmoji} to clipboard`);\n    console.log(emoji);\n  }\n  \n  const emojiPickerProps = { \n    ref: picker, \n    emojiData: EmojiData, \n    onEmojiSelect, \n    showNavbar: true, \n    showFooter: true,\n    collapseHeightOnSearch: false,\n  }\n\n  /**\n   * Adaptation of show-and-hide popup from https://rsms.me/inter/#charset for React hooks.\n   * Ignore this if you're just using this website as an example of how to setup the emoji picker.\n   */\n  const [notification] = useState(() => {\n\n    let timer = null\n    let visible =  false\n\n    const show = (message) => {\n      const el = document.querySelector('#notification') as HTMLDivElement;\n      (el.firstChild as HTMLElement).innerText = message\n      el.classList.add('visible')\n      if (visible) {\n        hide()\n        setTimeout(() => show(message), 120)\n        return\n      }\n      visible = true\n      el.style.visibility = null\n      clearTimeout(timer)\n      timer = setTimeout(() => hide(), 1200)\n    }\n\n    const hide = () => {\n      const el = document.querySelector('#notification') as HTMLDivElement;\n      if (visible) {\n        el.classList.remove('visible')\n        visible = false\n        el.style.visibility = 'hidden'\n      }\n    }\n  \n    return { show }\n  })\n\n  return (\n    <div style={{'display': 'flex', 'flexDirection': 'column', 'minHeight': '100vh', 'justifyContent': 'center', 'alignItems': 'center'}}>\n      <h1>Emoji Picker</h1>\n      <p>A virtualized <a href=\"https://twemoji.twitter.com/\">twemoji</a> picker written in React and TypeScript.</p>\n      <EmojiPicker {...emojiPickerProps}/>\n      <input {...inputProps}/>\n      <a href=\"https://github.com/BrianHung/EmojiPicker\">source code →</a>\n      <div id=\"notification\">\n        <div></div>\n      </div>\n    </div>\n  )\n}\n\nReactDOM.render(<ExampleSetup/>, document.getElementById('example-setup'));"],"names":["unified","codePoints","split","map","parseInt","u","String","fromCodePoint","apply","prev","next","attribute","relList","document","createElement","supports","link","querySelectorAll","MutationObserver","mutations","mutation","type","node","addedNodes","tagName","rel","observe","childList","subtree","ep","fetchOpts","script","integrity","referrerpolicy","referrerPolicy","crossorigin","credentials","getFetchOpts","href","p","Emoji","_a","emoji","className","_b","props","__spreadValues","unicode","alt","unifiedToNative","src","draggable","name","MemoizedNavbar","memo","_c","data","handleSelectInNavbar","_d","index2","setIndex","useState","onNavbarKeyDown","event","key","Object","keys","index22","length","onNavbarClick","category","__spreadProps","role","entries","list","i","props2","onClick","onKeyDown","tabIndex","ref","button","activeElement","closest","focus","MemoizedFooter","_e","emojiPreviewName","_f","style","fontSize","MemoizedScroll","emojisPerRow","emojiSize","numberScrollRows","focusedEmoji","emojiData","refVirtualList","handleClickInScroll","handleMouseInScroll","itemCount","itemRanges","collapseHeightOnSearch","arrayOfRows","setArrayOfRows","infiniteLoaderRef","useRef","prevFocusedEmoji","current","resetloadMoreItemsCache","scrollToItem","Math","min","to","prevEmoji","nextEmoji","row","forEach","loadMoreItems","startIndex","endIndex","nextArrayOfRows","range","find","range2","from","rowIndex","offset","slice","colIndex","liProps","onMouseMove","li","focusOnRender","preventScroll","emojiProps","assign","InfiniteLoader","isItemLoaded","minimumBatchSize","threshold","onItemsRendered","VirtualList","itemData","itemSize","height","innerElementType","MemoizedRow","prevProps","nextProps","index","prevStyle","prevData","prevIndex","prevRest","nextStyle","nextData","nextIndex","nextRest","shallowDiffer","forwardRef","_g","_h","parseFloat","EmojiPicker","onEmojiSelect","console","log","showNavbar","showFooter","showScroll","onKeyDownScroll","collapseCategoriesOnSearch","theme","pickerStateReducer","useCallback","prevState","nextState","searchEmojis","emojis","query","Boolean","EmojiPickerReducer","pickerState","setPickerState","useReducer","values","flat","useMemo","perRow","array","ceil","push","calcCountAndRange","search","results","score","keywords","word","indexOf","reduce","a","b","Number","filter","sort","grouped","includes","sum","refScroll","handleKeyDownScroll","preventDefault","emojis2","pop","arrayIndex","arrayEmoji","emojiIndex","findIndex","emoji2","arrayAbove","floor","arrayBelow","newIndex","ScrollProps","movementX","movementY","isSafari","window","safari","getWidths","scrollbarWidth","div","cssText","body","appendChild","offsetWidth","clientWidth","removeChild","measureScrollbar","width","setWidth","resizeWidth","addEventListener","removeEventListener","Navbar","virtualList","marginRight","Scroll","Footer","picker","input","throttledQuery","callback","idleHandler","requestIdleCallback","setTimeout","argsFunc","running","args","throttleIdleTask","inputProps","placeholder","onChange","target","value","toLowerCase","shiftKey","emojiPickerProps","EmojiData","nativeEmoji","async","string","state","navigator","permissions","Error","clipboard","writeText","textArea","select","execCommand","show","notification","timer","visible","message","el","querySelector","firstChild","innerText","classList","add","visibility","hide","remove","display","flexDirection","minHeight","justifyContent","alignItems","id","ReactDOM","render","ExampleSetup","getElementById"],"mappings":"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"}